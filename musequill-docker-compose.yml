version: '3.9'

networks:
  musequill-net:
    driver: bridge

services:
  chromadb:
    image: chromadb/chroma:latest
    container_name: musequill-chromadb-server
    restart: unless-stopped
    volumes:
      - ./data/chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=TRUE
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    ports:
      - "18000:8000"  # Host port 18000 -> Container port 8000
    networks:
      - musequill-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: musequill-redis-server
    restart: unless-stopped
    volumes:
      - ./data/redis-data:/data
    environment:
      # Redis configuration
      - REDIS_SAVE=900 1 300 10 60 10000  # Persistence settings
      - REDIS_MAXMEMORY=256mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    ports:
      - "16379:6379"  # Host port 16379 -> Container port 6379
    networks:
      - musequill-net
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional: Redis Commander for GUI management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123  # Change this in production
    ports:
      - "18081:8081"
    networks:
      - musequill-net
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

    # Ollama Model Initialization
  ollama-init:
    image: alpine:latest
    container_name: ollama-musequill-init

    # Wait for ollama to be healthy before running
    depends_on:
      ollama:
        condition: service_healthy

    volumes:
      - /mnt/secure/.ollama-musequill:/root/.ollama

    # Install curl and pull the model using Ollama API
    command: >
      sh -c "
        apk add --no-cache curl &&
        echo 'Checking if models exist...' &&
        if ! curl -s http://ollama:11434/api/tags | grep -q 'zhihu/zhi-create-qwen3-32b'; then
          echo 'Pulling model - zhihu/zhi-create-qwen3-32b' &&
          curl -X POST http://ollama:11434/api/pull -H 'Content-Type: application/json' -d '{\"name\": \"zhihu/zhi-create-qwen3-32b\"}' &&
          echo '\\nSuccessfully pulled zhihu/zhi-create-qwen3-32b'
        fi
        if ! curl -s http://ollama:11434/api/tags | grep -q 'technobyte/arliai-rpmax-12b-v1.1:q8_0'; then
          echo 'Pulling model - technobyte/arliai-rpmax-12b-v1.1:q8_0' &&
          curl -X POST http://ollama:11434/api/pull -H 'Content-Type: application/json' -d '{\"name\": \"technobyte/arliai-rpmax-12b-v1.1:q8_0\"}' &&
          echo '\\nSuccessfully pulled technobyte/arliai-rpmax-12b-v1.1:q8_0'
        fi
        if ! curl -s http://ollama:11434/api/tags | grep -q 'llama3.3:70b'; then
          echo 'Pulling model - llama3.3:70b' &&
          curl -X POST http://ollama:11434/api/pull -H 'Content-Type: application/json' -d '{\"name\": \"llama3.3:70b\"}' &&
          echo '\\nSuccessfully pulled llama3.3:70b'
        fi
        echo '\nWaiting for model to be fully loaded...' && 
        curl -X POST http://ollama:11434/api/generate -H 'Content-Type: application/json' -d '{\"model\": \"zhihu/zhi-create-qwen3-32b\", \"message\":\"\"}' &&
        curl -X POST http://ollama:11434/api/generate -H 'Content-Type: application/json' -d '{\"model\": \"technobyte/arliai-rpmax-12b-v1.1:q8_0\", \"message\":\"\"}' &&
        curl -X POST http://ollama:11434/api/generate -H 'Content-Type: application/json' -d '{\"model\": \"llama3.3:70b\", \"message\":\"\"}' &&
        echo '\\nAll models have been loaded'
      "

    # Only run once - don't restart
    restart: "no"
    
    networks:
      - musequill-net

  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-musequill
    privileged: true

    # GPU support for Ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
        limits:
          memory: 56G

    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_KEEP_ALIVE=-1
      - OLLAMA_DEBUG=1
      - OLLAMA_LOAD_TIMEOUT=600

    # Volume mounts for model storage
    volumes:
      # Mount host directory for persistent model storage
      - /mnt/secure/.ollama-musequill:/root/.ollama

    ports:
      - "25434:11434"

    # Health check
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

    # Restart policy
    restart: unless-stopped

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    networks:
      - musequill-net